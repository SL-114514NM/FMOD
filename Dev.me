# 开发教程 / Development Tutorial

| 语言 | Language | 链接 |
| :-- | :-- | :-- |
| 中文 | Chinese | [中文教程](#中文教程chinese-tutorial) |
| English | English | [English Tutorial](#english-tutorial-英文教程) |

---

# 中文教程(Chinese Tutorial)

## 开发步骤

### 1. 引用DLL文件
由于尚未配置NuGet包，需要手动引用以下DLL文件：
- `FMOD.dll`
- 其他相关依赖项

### 2. 创建配置文件 (Config.cs)
```csharp
public class Config
{
    // IsEnabled属性会自动生成，无需手动声明
    public string Hello { get; set; } = "Hello World";
}
```

### 3. 创建插件主类 (Plugin.cs)
```csharp
using FMOD.Plugins;

public class Plugin : PluginBase
{
    public override string Author => "开发者名称";
    public override Version Version => new Version(1, 0);
    public override string Name => "插件名称";
    public override string Description => "插件功能描述";
    public override Type ConfigType => typeof(Config);
    
    public override void OnDisabled()
    {
        // 在此处注销事件和释放资源
    }

    public override void OnEnabled()
    {
        // 插件启用时的初始化代码
        Log.Debug("插件启动成功!");
        
        // 获取配置文件实例
        var config = GetConfig<Config>();
        
        // 输出调试信息
        Log.Debug($"{config.Hello}");
        
        // 输出自定义颜色的信息
        Log.CustomInfo($"{config.Hello}", Color.red);
    }
}
```

### 4. 编译和部署
1. 按 `F6` 编译项目生成DLL文件
2. 将生成的插件文件放置在：`%appdata%/FMOD/Plugins/(服务器端口号)/` 目录下
3. 重启服务器或执行命令 `fmod reload` 进行热重载

---

# English Tutorial (英文教程)

## Development Steps

### 1. Reference DLL Files
Since NuGet packages are not yet configured, you need to manually reference the following DLL files:
- `FMOD.dll`
- Other related dependencies

### 2. Create Configuration File (Config.cs)
```csharp
public class Config
{
    // The IsEnabled property is automatically generated, no need to declare it manually
    public string Hello { get; set; } = "Hello World";
}
```

### 3. Create Main Plugin Class (Plugin.cs)
```csharp
using FMOD.Plugins;

public class Plugin : PluginBase
{
    public override string Author => "Developer Name";
    public override Version Version => new Version(1, 0);
    public override string Name => "Plugin Name";
    public override string Description => "Plugin description";
    public override Type ConfigType => typeof(Config);
    
    public override void OnDisabled()
    {
        // Unregister events and release resources here
    }

    public override void OnEnabled()
    {
        // Initialization code when plugin is enabled
        Log.Debug("Plugin started successfully!");
        
        // Get configuration instance
        var config = GetConfig<Config>();
        
        // Output debug information
        Log.Debug($"{config.Hello}");
        
        // Output custom colored message
        Log.CustomInfo($"{config.Hello}", Color.red);
    }
}
```

### 4. Compilation and Deployment
1. Press `F6` to compile the project and generate DLL files
2. Place the generated plugin files in: `%appdata%/FMOD/Plugins/(server-port-number)/` directory
3. Restart the server or execute the command `fmod reload` for hot reloading

---

## Important Notes
- Ensure all required DLL references are properly added to your project
- Test plugins in a development environment before deploying to production
- Use `Log.Debug()` for debugging purposes and `Log.CustomInfo()` for colored output
- The configuration system automatically handles enabling/disabling of plugins
